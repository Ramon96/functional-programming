(function (d3$1,topojson) {
    'use strict';

    // This function retrieves the data from the end point
    async function runQuery(url, query){
        let request =  fetch(url+"?query="+ encodeURIComponent(query) +"&format=json");

        let respons = await request;
        let handleRespons = await respons.json();
        
        return handleRespons;
    }

    async function getQuery(url, query){
        const data = await runQuery(url, query);
      
      	return data;
    }

    const url = "https://api.data.netwerkdigitaalerfgoed.nl/datasets/ivo/NMVW/services/NMVW-39/sparql";
    const query = `PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
    PREFIX dc: <http://purl.org/dc/elements/1.1/>
    PREFIX dct: <http://purl.org/dc/terms/>
    PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
    PREFIX edm: <http://www.europeana.eu/schemas/edm/>
    PREFIX foaf: <http://xmlns.com/foaf/0.1/>
    PREFIX wgs84: <http://www.w3.org/2003/01/geo/wgs84_pos#>
    PREFIX geo: <http://www.opengis.net/ont/geosparql#>
    
    
SELECT  ?typeLabel (SAMPLE(?cho) AS ?filtercho) ?title ?lat ?long  (COUNT(?cho) AS ?choCount) WHERE {
      <https://hdl.handle.net/20.500.11840/termmaster13440> skos:narrower ?type .
      ?type skos:prefLabel ?typeLabel .
      ?cho dc:title ?title.
      
      ?cho edm:object ?type .
      
      ?place skos:exactMatch/wgs84:lat ?lat .
      ?place skos:exactMatch/wgs84:long ?long .     
    
    }`;

    getQuery(url, query).then(data => {
    	init(data.results.bindings);
    });

    function init(places){
    const svg = d3$1.select('svg');
    const projection = d3$1.geoMercator();
    const pathGenerator = d3$1.geoPath().projection(projection);
    const g = svg.append('g');
      
    const category = places[0].typeLabel.value;
      
      const cats = places.map(entry => entry.typeLabel.value);
      
      const colorscale = d3.scaleOrdinal()
      	.domain(cats)
        .range(d3.schemeCategory10);
      

    g.append('path')
      .attr('class', 'sphere')
      .attr('d', pathGenerator({type: 'Sphere'}));

    	
    svg.call(d3$1.zoom().on('zoom', () => {
    		g.attr('transform', d3$1.event.transform);
    }));
      
        const legend = svg.selectAll(".legend")
    		.data(colorscale.domain())
    		.enter().append("g")
    		.attr("class", "legend")
    		.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });


    		legend.append("rect")
    		.attr("x", 190 - 18)
    		.attr("width", 18)
    		.attr("height", 18)
    		.style("fill", colorscale);

    		legend.append("text")
    		.attr("x", 185 - 24)
    		.attr("y", 9)
    		.attr("dy", ".35em")
    		.style("text-anchor", "end")
    		.text(function(d) { return d; });


    Promise.all([
      d3$1.tsv('https://unpkg.com/world-atlas@1.1.4/world/50m.tsv'),
      d3$1.json('https://unpkg.com/world-atlas@1.1.4/world/50m.json')
    ]).then(([tsvData, topoJSONdata]) => {
      		const countryName = tsvData.reduce((accumulator, row) => {
      			accumulator[row.iso_n3] = row.name;
          		return accumulator;
          }, {});
      
    			const country = topojson.feature(topoJSONdata, topoJSONdata.objects.countries);
            g.selectAll('path')
              .data(country.features)
              .enter()
              .append('path')
              .attr('class', 'country')
              .attr('d', d => pathGenerator(d))
            .append('title')
            	.text(d => countryName[d.id]);
      
      	g.selectAll('circle')
      		.data(places)
    						  .enter().append("circle")
    						  .attr("transform", function(d) {
    								return "translate(" + projection([d.long.value, d.lat.value]) + ")";
    						  })
    							.style('fill', function(d){
                    return colorscale(d.typeLabel.value)
                  })
                  .transition()
                      .delay(1000)
                      .duration(700)
                      .ease(d3.easeBounce)
    						  .attr("r", 1);
    });
    }

}(d3,topojson));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,